name: Docker Release Workflow with Auto Tagging

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Select version type (major, minor, fix)'
        required: true
        default: 'fix'  # domyślny wybór wersji
        type: choice
        options:
          - major
          - minor
          - patch

permissions:
  contents: write
  pull-requests: write

env:
  DOCKER_IMAGE_NAME: gesture_controlled_presentation_tool_frontend

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Ensure version type is selected
        run: |
          if [[ -z "${{ github.event.inputs.version_type }}" ]]; then
            echo "Error: version_type is not selected!" 
            exit 1
          fi

      - name: Generate new tag based on version type
        id: generate_tag
        run: |
          git fetch --tags
          tags=$(git tag -l)

          latest_tag=$(echo "$tags" | grep -E '^v?0\.[0-9]+\.[0-9]+(-.*)?$' | sort -V | tail -n 1)

          if [ -n "$latest_tag" ]; then
            if [[ "$latest_tag" == v* ]]; then
              latest_tag="${latest_tag#v}"
            fi

            base_version=$(echo "$latest_tag" | sed 's/-.*//')
            major=$(echo "$base_version" | cut -d'.' -f1)
            minor=$(echo "$base_version" | cut -d'.' -f2)
            patch=$(echo "$base_version" | cut -d'.' -f3)
          else
            major=0
            minor=0
            patch=0
            latest_tag="HEAD"
          fi

          version_type="${{ github.event.inputs.version_type }}"

          # Zwiększamy odpowiednią wersję na podstawie ręcznego wyboru
          case $version_type in
            "major")
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            "minor")
              minor=$((minor + 1))
              patch=0
              ;;
            "patch")
              patch=$((patch + 1))
              ;;
            *)
              echo "Invalid version type selected!"
              exit 1
              ;;
          esac

          new_tag="v${major}.${minor}.${patch}"

          echo "Selected version type: $version_type"
          echo "New tag: $new_tag"
          echo "NEW_TAG=$new_tag" >> $GITHUB_ENV

          git tag $new_tag
          git push origin $new_tag

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build Docker image using Docker Compose
        run: |
          docker-compose -f docker-compose.yml build --no-cache

      - name: Tag Docker image
        run: |
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:latest ${{ env.DOCKER_IMAGE_NAME }}:${{ env.NEW_TAG }}

      - name: Save Docker image as tar
        run: |
          docker save -o ${{ env.DOCKER_IMAGE_NAME }}-${{ env.NEW_TAG }}.tar ${{ env.DOCKER_IMAGE_NAME }}:${{ env.NEW_TAG }}

      - name: Create README file with instructions
        run: |
          echo "To run the application with Docker, follow these steps:" > ToDo.txt
          echo "1. Download and unzip the release file." >> ToDo.txt
          echo "2. Run the following command to load the Docker image:" >> ToDo.txt
          echo "   docker load -i ${{ env.DOCKER_IMAGE_NAME }}-${{ env.NEW_TAG }}.tar" >> ToDo.txt
          echo "3. Start the application by running this command:" >> ToDo.txt
          echo "   docker run -d -p 3000:3000 ${{ env.DOCKER_IMAGE_NAME }}:${{ env.NEW_TAG }}" >> ToDo.txt
          echo "4. Visit http://localhost:3000 to view the application." >> ToDo.txt

      - name: Zip Docker image and ToDo.txt
        run: |
          zip ${{ env.DOCKER_IMAGE_NAME }}-${{ env.NEW_TAG }}.zip ${{ env.DOCKER_IMAGE_NAME }}-${{ env.NEW_TAG }}.tar ToDo.txt

      - name: Create Pull Request to main branch
        uses: peter-evans/create-pull-request@v4
        with:
          title: "Release ${{ env.NEW_TAG }}"
          body: "This pull request includes the release for version ${{ env.NEW_TAG }}."
          base: main
          head: ${{ github.sha }}
          draft: true # Ustawiamy PR jako draft, aby nie był od razu scalany

      - name: Create GitHub Release and upload artifacts
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}
          release_name: "Release ${{ env.NEW_TAG }}"
          files: |
            ${{ env.DOCKER_IMAGE_NAME }}-${{ env.NEW_TAG }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up
        run: |
          rm ${{ env.DOCKER_IMAGE_NAME }}-${{ env.NEW_TAG }}.tar
          rm ${{ env.DOCKER_IMAGE_NAME }}-${{ env.NEW_TAG }}.zip
          rm ToDo.txt
