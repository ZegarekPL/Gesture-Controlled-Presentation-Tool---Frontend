name: Auto Tagging

on:
  push:
    branches:
      - aaa
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Select version type (major, minor, fix)'
        required: true
        default: 'fix'

permissions:
  contents: write

env:
  DOCKER_IMAGE_NAME: gesture_controlled_presentation_tool_frontend

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Generate new tag based on commit messages
        id: generate_tag
        run: |
          git fetch --tags
          tags=$(git tag -l)

          latest_tag=$(echo "$tags" | grep -E '^v?0\.[0-9]+\.[0-9]+(-.*)?$' | sort -V | tail -n 1)

          if [ -n "$latest_tag" ]; then
            if [[ "$latest_tag" == v* ]]; then
              latest_tag="${latest_tag#v}"
            fi

            base_version=$(echo "$latest_tag" | sed 's/-.*//')
            major=$(echo "$base_version" | cut -d'.' -f1)
            minor=$(echo "$base_version" | cut -d'.' -f2)
            patch=$(echo "$base_version" | cut -d'.' -f3)
          else
            major=0
            minor=0
            patch=0
            latest_tag="HEAD"  # Domyślnie HEAD, gdy brak poprzedniego tagu
          fi

          # Sprawdzamy commit messages od ostatniego tagu
          commits=$(git log ${latest_tag}..HEAD --pretty=%B 2>/dev/null || echo "")

          # Zmienna do przechowywania informacji o typach commitów
          has_feat_commit=false
          has_fix_commit=false
          has_release_commit=false

          # Sprawdzamy każdy commit w historii od ostatniego tagu
          while read -r commit; do
            if [[ "$commit" =~ ^feat ]]; then
              has_feat_commit=true
            elif [[ "$commit" =~ ^fix ]]; then
              has_fix_commit=true
            elif [[ "$commit" =~ Release ]]; then
              has_release_commit=true
            fi
          done <<< "$commits"

          # Wybieramy typ wersji na podstawie commitów
          if [ "$has_release_commit" = true ]; then
            version_type="major"
          elif [ "$has_feat_commit" = true ]; then
            version_type="minor"
          elif [ "$has_fix_commit" = true ]; then
            version_type="patch"
          else
            version_type="patch"  # Domyślnie patch, gdy brak feat/fix/Release
          fi

          # Zwiększamy odpowiednią wersję
          case $version_type in
            "major")
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            "minor")
              minor=$((minor + 1))
              patch=0
              ;;
            "patch")
              patch=$((patch + 1))
              ;;
          esac

          new_tag="v${major}.${minor}.${patch}"

          echo "Detected version type: $version_type"
          echo "New tag: $new_tag"
          echo "NEW_TAG=$new_tag" >> $GITHUB_ENV

          git tag $new_tag
          git push origin $new_tag 

      - name: Create GitHub Release and upload artifacts
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}
          release_name: "Release ${{ env.NEW_TAG }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}